---
description: 
globs: 
alwaysApply: false
---
# Ruleset: React Vehicle Listing Application for Motoraldia API

**Document Version:** 1.0
**Date:** May 29, 2025
**Objective:** To define the standards, technologies, and implementation guidelines for developing the Motoraldia React frontend, connecting to the "Custom API Vehicles for Motoraldia".

---

## 1. Core Technologies & Setup

* **Rule 1.1: Project Initialization**
    * 1.1.1. The project MUST be initialized using Vite with the React template.
    * 1.1.2. Command for initialization: `npm create vite@latest motoraldia-react-app -- --template react`
    * 1.1.3. After initialization, navigate into `motoraldia-react-app`, run `npm install` to install base dependencies, and use `npm run dev` for development.

* **Rule 1.2: Essential Libraries**
    * 1.2.1. `react-router-dom` MUST be used for routing. Install using `npm install react-router-dom`.
    * 1.2.2. `axios` MUST be used for API communication. Install using `npm install axios`.
    * 1.2.3. `sass` MUST be used for styling. Install using `npm install sass`.

## 2. Project Structure

* **Rule 2.1: Root Directory Layout**
    * The project root MUST contain standard Vite project files (`public/`, `src/`, `.env`, `package.json`, etc.).

* **Rule 2.2: `src` Directory Layout**
    * The `src` directory MUST adhere to the following structure:
        ```
        src/
        ├── api/
        │   └── apiClient.js        # Centralized API call logic
        ├── assets/
        │   ├── images/
        │   └── styles/
        │       ├── _variables.scss # SCSS variables (colors, fonts)
        │       └── main.scss       # Main SCSS file, global styles
        ├── components/
        │   ├── common/             # Generic reusable components (Button, Input, Modal, PrivateRoute etc.)
        │   ├── VehicleCard/        # Component for vehicle preview
        │   ├── Filters/            # Component for search filters
        │   ├── Layout/             # Header, Footer, PageLayout
        │   └── AddEditVehicleForm/ # Form for creating/editing vehicles
        ├── contexts/               # React Context (e.g., AuthContext)
        ├── hooks/                  # Custom React Hooks
        ├── pages/                  # Page-level components (HomePage, VehicleListPage, etc.)
        ├── services/               # (Optional) Business logic, data transformation not in components/hooks
        ├── utils/                  # Utility functions (formatting, validation etc.)
        ├── App.jsx                 # Main App component, routing setup
        └── main.jsx                # Application entry point
        ```

## 3. Coding Standards

* **Rule 3.1: Naming Conventions**
    * 3.1.1. Components: PascalCase (e.g., `VehicleCard.jsx`).
    * 3.1.2. Functions and Variables: camelCase (e.g., `fetchVehicles`).
    * 3.1.3. SCSS files: kebab-case or PascalCase for component-specific styles (e.g., `vehicle-card.scss` or `VehicleCard.scss`).

* **Rule 3.2: Code Formatting**
    * Prettier and ESLint SHOULD be configured and used to maintain consistent code style. (Configuration details to be added).

* **Rule 3.3: Commenting**
    * Complex logic, non-obvious code sections, and `TODO` items MUST be clearly commented.

## 4. Styling Implementation

* **Rule 4.1: Styling Engine**
    * SCSS MUST be used as the CSS preprocessor.

* **Rule 4.2: Color Palette & Variables**
    * 4.2.1. Base colors MUST be defined in `src/assets/styles/_variables.scss`.
    * 4.2.2. Required color variables:
        ```scss
        $primary-color: #F57C0B;
        $secondary-color: #DE4C02;
        $dark-color: #0F172A;
        $light-color: #FFFFFF; // For backgrounds or text on dark
        $text-color: $dark-color;
        $text-light-color: #555; // Example for secondary text
        $border-color: #E0E0E0; // Example for borders
        // Add other common variables (font sizes, spacing units) as needed
        ```

* **Rule 4.3: Global Styles**
    * 4.3.1. Global styles (body, typography, resets) MUST be defined in `src/assets/styles/main.scss`.
    * 4.3.2. `_variables.scss` MUST be imported into `main.scss`.
    * 4.3.3. `main.scss` MUST be imported in `src/main.jsx`.

* **Rule 4.4: Component Styles**
    * Component-specific styles SHOULD be co-located with the component (e.g., in `src/components/VehicleCard/VehicleCard.scss`) and imported into the respective component file.

## 5. API Client Configuration

* **Rule 5.1: API Client Setup (`apiClient.js`)**
    * 5.1.1. An Axios instance MUST be configured in `src/api/apiClient.js`.
    * 5.1.2. This client will manage base URL and default request configurations.
    * 5.1.3. Implement basic response interceptors for global error logging from API responses (JSON structure: `{"status": "error", "message": "Descripción del error", "code": "código_error"}`).

* **Rule 5.2: Base URL Configuration**
    * 5.2.1. The API base URL (`/wp-json/api-motor/v1`) MUST be stored in an environment variable `VITE_API_BASE_URL`.
    * 5.2.2. `.env` file example: `VITE_API_BASE_URL=https://your-wordpress-site.com/wp-json/api-motor/v1` (or `/wp-json/api-motor/v1` if served from the same domain).

* **Rule 5.3: Authenticated Requests**
    * 5.3.1. For operations requiring authentication (POST, PUT, DELETE vehicles), requests MUST be configured to send WordPress cookies.
    * 5.3.2. With Axios, this means using `withCredentials: true` in the request config.

## 6. Routing Configuration

* **Rule 6.1: Router Setup**
    * `react-router-dom`'s `BrowserRouter` MUST be used in `src/App.jsx` to wrap the application routes.

* **Rule 6.2: Core Application Routes**
    * The following core routes MUST be implemented:
        * `/`: HomePage (Main listing, filters)
        * `/vehicles`: VehicleListPage (Alternative full listing page, if different from HomePage)
        * `/vehicle/:id`: VehicleDetailPage
        * `/login`: LoginPage
        * `/seller/:sellerId`: SellerProfilePage
        * `/dashboard`: UserDashboardPage (Protected)
        * `/add-vehicle`: AddEditVehiclePage (for creating, Protected)
        * `/edit-vehicle/:id`: AddEditVehiclePage (for editing, Protected)

* **Rule 6.3: Private Route Implementation**
    * A `PrivateRoute` component MUST be created to protect routes requiring authentication.
    * This component will check authentication status (from `AuthContext`) and redirect to `/login` if the user is not authenticated.

## 7. State Management

* **Rule 7.1: Authentication State**
    * 7.1.1. User authentication state (current user, loading status) MUST be managed using React Context API (`AuthContext`).
    * 7.1.2. The `AuthContext` will provide `login`, `logout` functions and `currentUser` object.
    * 7.1.3. On application load, `AuthContext` SHOULD attempt to verify existing authentication (e.g., by calling `GET /authors` which returns current user info if authenticated).

* **Rule 7.2: Local Component State**
    * `useState` and `useReducer` hooks MUST be used for managing local component state (form inputs, UI states, fetched data for a single component).

* **Rule 7.3: Global State (Advanced)**
    * If complex global state beyond authentication is required, a dedicated state management library (e.g., Zustand or Redux) MAY be considered. This decision requires team consensus.

## 8. Core Component Implementation Rules

* **Rule 8.1: `VehicleCard` Component (`src/components/VehicleCard/`)**
    * 8.1.1. Props: Must accept a `vehicle` object.
    * 8.1.2. Display: Must show vehicle title (`titol-anunci`), price (`preu`), image (use `featured_image`, then first `gallery` image, then a placeholder), and key details like year (`any`), mileage (`quilometres`), fuel type (`combustible`).
    * 8.1.3. Link: The card MUST link to the `VehicleDetailPage` (`/vehicle/:id`).

* **Rule 8.2: `Filters` Component (`src/components/Filters/`)**
    * 8.2.1. Functionality: Must provide UI for filtering by brand, model (conditional on brand), year, and price (slider).
    * 8.2.2. Data Sources for Filters:
        * Brands: `GET /marques-cotxe`, `GET /marques-moto`.
        * Models: `GET /marques-cotxe?marca={slug}` or `GET /marques-moto?marca={slug}`.
        * Fuel Types: `GET /tipus-combustible`.
        * Vehicle States: `GET /estat-vehicle`.
        * Years: Populate from available vehicle data or a predefined range.
    * 8.2.3. Price Slider: If API does not support price range query parameters for `GET /vehicles`, initial filtering can be client-side (for small datasets) or this feature requires API enhancement. State this limitation.
    * 8.2.4. Output: Must provide a callback function (`onFilterChange`) with selected filter values.

* **Rule 8.3: `Layout` Components (`src/components/Layout/`)**
    * 8.3.1. `Header`: Must contain navigation links and branding.
    * 8.3.2. `Footer`: Must contain copyright and other relevant links.

* **Rule 8.4: `AddEditVehicleForm` Component (`src/components/AddEditVehicleForm/` or within `AddEditVehiclePage.jsx`)**
    * 8.4.1. Must handle both creation and editing of vehicles.
    * 8.4.2. Fields: Must include all required fields from API documentation (`tipus-vehicle`, `estat-vehicle`, `marques-cotxe`/`marques-de-moto`, `models-cotxe`/`models-de-moto`, `preu`, `quilometres`, `any`, `combustible`, `potencia`) and conditional fields based on `tipus-vehicle`.
    * 8.4.3. Image Uploads: Must support file uploads for `featured_image` and `gallery` using `FormData`.

## 9. Feature Implementation Rules

* **Rule 9.1: Vehicle Listing & Pagination (`GET /vehicles`)**
    * 9.1.1. Fetch vehicles using the `apiClient`.
    * 9.1.2. Implement pagination using `page` and `per_page` parameters. `per_page` should not exceed 50.
    * 9.1.3. Display total items and pages using `X-WP-Total` and `X-WP-TotalPages` headers.

* **Rule 9.2: Single Vehicle Detail View (`GET /vehicles/{id}`)**
    * Fetch and display all available data for a single vehicle.

* **Rule 9.3: Vehicle Filtering Logic**
    * Apply filters by making new API calls to `GET /vehicles` with appropriate query parameters (`brand`, `user_id`, `post_id`, `post_name`).
    * Model filtering is dependent on brand selection.

* **Rule 9.4: User Authentication Flow**
    * 9.4.1. `LoginPage`: Handle form submission for login. For cookie authentication, this involves an AJAX request that results in a cookie being set by the browser.
    * 9.4.2. `AuthContext`: Update on successful login/logout.
    * 9.4.3. API Authentication method: Primarily target WordPress Cookie authentication.

* **Rule 9.5: Vehicle Creation (`POST /vehicles`)**
    * 9.5.1. User MUST have `edit_posts` capability (handled by backend based on authenticated user).
    * 9.5.2. Request body MUST conform to API specification, including required fields and image data via `FormData`.
    * 9.5.3. Vehicle title is auto-generated by the backend.

* **Rule 9.6: Vehicle Update (`PUT /vehicles/{id}`)**
    * User MUST have `edit_posts` capability / be owner.
    * Send only updated fields.

* **Rule 9.7: Vehicle Deletion (`DELETE /vehicles/{id}`)**
    * User MUST have `edit_posts` capability / be owner.
    * Implement a confirmation step before deletion.

* **Rule 9.8: Professional Seller Profile (`GET /sellers`, `GET /vehicles?user_id={seller_user_id}`)**
    * Fetch seller data using `GET /sellers` (adapt if a specific seller ID endpoint is available).
    * Display seller's vehicles by filtering `GET /vehicles` with `user_id`.

* **Rule 9.9: User Dashboard**
    * Display vehicles listed by the currently authenticated user using `GET /vehicles` with their `user_id`.
    * Provide options to edit/delete their own vehicles.

* **Rule 9.10: Image Handling**
    * 9.10.1. Support both URL-based and direct file uploads for `featured_image` and `gallery`.
    * 9.10.2. For file uploads, use `FormData` and `multipart/form-data` content type.
    * 9.10.3. Optimize images client-side before upload if possible, or ensure users are advised to upload optimized images.

## 10. Specific Data Handling Rules

* **Rule 10.1: Price Display (Current and Old)**
    * 10.1.1. Current price is displayed using the `preu` field from the vehicle data.
    * 10.1.2. **Action Required**: The API documentation does not specify a field for "old price." This feature requires backend confirmation/addition of such a field. If available, display it appropriately (e.g., strikethrough).

* **Rule 10.2: "Destacados" (Highlighted Vehicles)**
    * 10.2.1. **Action Required**: The API documentation does not specify how a vehicle is marked as "destacado" or how this status is managed via API. This feature requires backend clarification.
    * 10.2.2. If a field (e.g., `is_destacado: true`) becomes available in the vehicle data, conditionally style these vehicles on professional seller pages and listings. Backend manages assignment logic.

## 11. Error Handling and Loading States

* **Rule 11.1: API Error Handling**
    * 11.1.1. Use `try...catch` blocks or `.catch()` for API calls.
    * 11.1.2. Display user-friendly error messages based on API error responses (e.g., from the `message` field in the error JSON).
    * 11.1.3. HTTP status codes (`400`, `401`, `403`, `404`, `500`) must be interpreted correctly.

* **Rule 11.2: Loading State Indicators**
    * Display loading indicators (spinners, skeleton screens) during API requests to improve UX.

## 12. Build and Deployment

* **Rule 12.1: Build Command**
    * The application MUST be built using `npm run build`.

* **Rule 12.2: Deployment Environment**
    * The built static assets are to be deployed on a static hosting provider.
    * CORS MUST be correctly configured on the WordPress backend if the frontend is on a different domain.

## 13. Design Adherence

* **Rule 13.1: Visual Reference**
    * The UI/UX MUST draw inspiration from `motoraldia.net`, focusing on layout, component styling, and user flow.

* **Rule 13.2: Color Usage**
    * The defined color palette (Rule 4.2) MUST be used consistently throughout the application.

## 14. API Endpoint Usage

* **Rule 14.1: Adherence to Documentation**
    * All API interactions MUST strictly adhere to the "Custom API Vehicles for Motoraldia" (Version 2.0, Namespace: `api-motor/v1`, Content Type: `singlecar`) documentation. This includes endpoint paths, request parameters, request bodies, and interpretation of responses.

---
**End of Ruleset**